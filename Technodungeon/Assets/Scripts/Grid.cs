using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

//manages (or will manage) an Array of GridSpaces that contain either a Tile or a Block.
//Blocks are the voxel-based Prefabs that are pre-generated by the BlockPrefabGenerator in the Editor
//Tiles are the normal map tiles that will make up the main part of the game.

public class Grid : MonoBehaviour {
	
    public bool shouldRender = true;//TODO:
    public bool generateBlocksOnStart = false;//debug setting to pregenerate blocks, wastes memory
    public static int gridSize = 2;//meters
	public int xDimension = 20;
	public int yDimension = 20;
	public bool drawGizmos = true;
	public bool drawIconGizmos = true;
    public bool drawBlockGizmos = false; //gizmos will be drawn for instantiated blocks that exist in memory (thusly, only during game run)
	public Texture2D icon;
    private GameObject[,,] grid;

    public Grid() {
        //for our 8-block array, we'll have Y be up, Z be forward, and X be lateral.
        //forward direction is northern/southern movement, lateral is east/west.
        grid = new GameObject[xDimension, yDimension, 8];
    }
	
    void Awake() {
        //some code to help debug blocks:
        if (generateBlocksOnStart) {
            pregenerateBlocks ();
        }
    }
        
    public static int getSize() {
        return gridSize;
    }

    //loads all blocks in for testing purposes
    private void pregenerateBlocks() {
        /*Debug.LogWarning ("WARNING! You've left the debug setting ' Pregenerate Blocks ' on. This is only used for testing the grid block generation and storing algorithm, and is essentially useless at this point, so turn it off as it severely wastes memory.");
        for (int i = 0; i < xDimension; i++) {
            for (int j = 0; j < yDimension; j++) {
                for (int p = 0; p < 8; p++) {
                    newBlock (i, j, (BlockPos)p);
                    //Debug.Log ("Created new block at [" + i + ", " + j + ", " + p + "]: " + blk);
                }
            }
        }*/
    }


	void OnDrawGizmos() {
        if (drawGizmos) {
            for (int x = xDimension-1; x >= 0; x--) {
                for (int y = yDimension-1; y >= 0; y--) {
                    Func<float, float, float> dimensionPos = (float offset, float distance) => (offset + distance * gridSize) + (gridSize / 2);
                    //it's weird, but we want the x and y dimensions of our grid to be laid over the x and z dimensions in Unity.
                    if (drawIconGizmos) {
                        Gizmos.DrawIcon (new Vector3 (dimensionPos (transform.position.x, x), transform.position.y, dimensionPos (transform.position.z, y)), icon.name, false);
                    } else {
                        Gizmos.color = Color.white;
                        Gizmos.DrawSphere (new Vector3 (dimensionPos (transform.position.x, x), transform.position.y, dimensionPos (transform.position.z, y)), 0.025f);
                    }
                }
            }
            if (drawBlockGizmos) {
                for (int x = xDimension-1; x >= 0; x--) {
                    for (int y = yDimension-1; y >= 0; y--) {
                        for (int i = 0; i < 8; i++) {
                            GameObject gobj = grid [x, y, i];
                            if (gobj != null) {
//                                Vector3 offset = new Vector3 (this.transform.position.x + blk.getPosition ().x + bsize, this.transform.position.y + blk.getPosition ().y + bsize, this.transform.position.z + blk.getPosition ().z + bsize);
                                Vector3 offset = gobj.transform.position;
                                Gizmos.color = Color.white;
                                Gizmos.DrawSphere (offset, 0.025f);
                            }
                        }
                    }
                }
            }
        }
    }

}
